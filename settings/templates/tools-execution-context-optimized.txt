🔧 MCP TOOLS & EXECUTION CONTEXT

═══════════════════════════════════════════════════════════════════
📚 AVAILABLE MCP TOOLS
═══════════════════════════════════════════════════════════════════

{{MCP_TOOLS_SCHEMAS}}

═══════════════════════════════════════════════════════════════════
🔍 QUERY ACTION PATTERNS
═══════════════════════════════════════════════════════════════════

Use "query" action to discover existing AWS resources dynamically.
These steps MUST be placed FIRST in your execution plan.

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🎓 TOOL PATTERN REFERENCE FOR NEW RESOURCES
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

If you encounter a resource not explicitly documented below, follow these patterns:

TOOL NAMING PATTERNS:
├─ Discovery: get-default-{resource}, list-{resources}, get-latest-{type}
├─ Creation: create-{resource}
└─ Management: start-{resource}, stop-{resource}, delete-{resource}

PARAMETER STYLE:
├─ Always camelCase: vpcId, bucketName, functionName (NOT vpc_id, bucket_name)
├─ No filters in list tools: list-vpcs, list-subnets (NOT list-vpcs with filters)
└─ Arrays when multiple: subnetIds, securityGroupIds

OUTPUT FIELDS:
├─ IDs: {resource}Id → vpcId, subnetId, instanceId
├─ ARNs: {resource}Arn → roleArn, functionArn, topicArn
└─ Names: {resource}Name → bucketName, tableName

COMMON PATTERNS BY CATEGORY:

Storage (S3, EFS, EBS):
  Tools: create-s3-bucket, create-file-system, create-volume
  Params: bucketName, fileSystemName, volumeId, size
  No network dependencies

Compute (EC2, Lambda, ECS):
  Tools: create-ec2-instance, create-lambda-function, create-ecs-cluster
  Params: imageId/functionName, instanceType/runtime, vpcId, subnetId, securityGroupId
  Requires: VPC, Subnet, Security Group

Database (RDS, DynamoDB):
  Tools: create-db-instance, create-table
  Params: dbInstanceIdentifier/tableName, engine/attributes, vpcId, subnetIds
  Requires: VPC, Subnets (multiple AZs), Security Group, DB subnet group

Network (ALB, VPC, CloudFront):
  Tools: create-load-balancer, create-vpc, create-distribution
  Params: name, scheme, vpcId, subnetIds, securityGroupIds
  Requires: VPC, Subnets (2+ AZs for ALB)

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
📋 DOCUMENTED RESOURCE PATTERNS
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Below are specific patterns for commonly used resources. For resources not listed,
apply the general patterns above.

PATTERN 1: VPC DISCOVERY
Discover existing VPCs or get default VPC

METHOD A: Get default VPC (recommended):
{
  "id": "step-discover-vpc",
  "name": "Get default VPC",
  "description": "Find default VPC for resource placement",
  "action": "query",
  "resourceId": "vpc",
  "mcpTool": "get-default-vpc",
  "toolParameters": {},
  "dependsOn": [],
  "status": "pending"
}

METHOD B: List all VPCs:
{
  "id": "step-discover-vpc",
  "name": "List VPCs",
  "description": "Find all VPCs in region",
  "action": "query",
  "resourceId": "vpc",
  "mcpTool": "list-vpcs",
  "toolParameters": {},
  "dependsOn": [],
  "status": "pending"
}

Output: Returns vpcId field

PATTERN 2: SUBNET DISCOVERY
Discover subnets within a VPC

METHOD A: List subnets in VPC:
{
  "id": "step-discover-subnets",
  "name": "List subnets",
  "description": "Find all subnets in VPC",
  "action": "query",
  "resourceId": "subnets",
  "mcpTool": "list-subnets",
  "toolParameters": {
    "vpcId": "{{step-discover-vpc.resourceId}}"
  },
  "dependsOn": ["step-discover-vpc"],
  "status": "pending"
}

METHOD B: Select subnets for ALB (auto-selects 2+ subnets in different AZs):
{
  "id": "step-select-alb-subnets",
  "name": "Select subnets for ALB",
  "description": "Auto-select subnets for load balancer",
  "action": "query",
  "resourceId": "alb-subnets",
  "mcpTool": "list-subnets-for-alb",
  "toolParameters": {
    "vpcId": "{{step-discover-vpc.resourceId}}",
    "minAZs": 2,
    "requireMultiAZ": true
  },
  "dependsOn": ["step-discover-vpc"],
  "status": "pending"
}

Output: Returns subnetId field or array of subnet IDs
Note: For single subnet needs, use list-subnets and select first result
Note: For ALB deployments, always use list-subnets-for-alb to ensure multi-AZ compliance

PATTERN 3: SECURITY GROUP DISCOVERY
Discover security groups in a VPC

METHOD A: List all security groups:
{
  "id": "step-discover-sg",
  "name": "List security groups",
  "description": "Find available security groups",
  "action": "query",
  "resourceId": "security-group",
  "mcpTool": "list-security-groups",
  "toolParameters": {},
  "dependsOn": [],
  "status": "pending"
}

Output: Returns securityGroupId field

Common filters:
- "vpc-id": "vpc-xxxxx" → Find SGs in VPC
- "group-name": "web-sg" → Find by name
- "tag:Environment": "production" → Find by tag

PATTERN 4: AMI DISCOVERY
Discover latest AMI for instance launch

METHOD A: Get latest Ubuntu AMI:
{
  "id": "step-get-ubuntu-ami",
  "name": "Get latest Ubuntu AMI",
  "description": "Find latest Ubuntu image",
  "action": "query",
  "resourceId": "ubuntu-ami",
  "mcpTool": "get-latest-ubuntu-ami",
  "toolParameters": {
    "architecture": "x86_64"
  },
  "dependsOn": [],
  "status": "pending"
}

METHOD B: Get latest Amazon Linux AMI:
{
  "id": "step-get-amzn-ami",
  "name": "Get latest Amazon Linux AMI",
  "description": "Find latest Amazon Linux image",
  "action": "query",
  "resourceId": "amzn-ami",
  "mcpTool": "get-latest-amazon-linux-ami",
  "toolParameters": {},
  "dependsOn": [],
  "status": "pending"
}

METHOD C: Get latest Windows AMI:
{
  "id": "step-get-windows-ami",
  "name": "Get latest Windows AMI",
  "description": "Find latest Windows Server image",
  "action": "query",
  "resourceId": "windows-ami",
  "mcpTool": "get-latest-windows-ami",
  "toolParameters": {
    "version": "2022"
  },
  "dependsOn": [],
  "status": "pending"
}

Output: Returns amiId field
Architecture options: "x86_64" (default) or "arm64"
Windows versions: "2016", "2019", "2022"

Common AMI patterns:
- Ubuntu 22.04: "ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-*"
- Amazon Linux 2: "amzn2-ami-hvm-*-x86_64-gp2"
- Ubuntu 20.04: "ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-*"

Always use:
- "state": "available"
- "sort": "creation-date"
- "order": "desc"
- "maxResults": 1

PATTERN 5: INSTANCE DISCOVERY
Discover existing EC2 instances

{
  "id": "step-list-instances",
  "name": "List EC2 instances",
  "description": "Find running EC2 instances",
  "action": "query",
  "resourceId": "instances",
  "mcpTool": "list-ec2-instances",
  "toolParameters": {},
  "dependsOn": [],
  "status": "pending"
}

Output: Returns instanceId field
Lists all instances in the region with their status

PATTERN 6: LOAD BALANCER DISCOVERY
Discover existing load balancers

METHOD A: List all load balancers:
{
  "id": "step-list-albs",
  "name": "List load balancers",
  "description": "Find existing ALBs",
  "action": "query",
  "resourceId": "albs",
  "mcpTool": "list-load-balancers",
  "toolParameters": {},
  "dependsOn": [],
  "status": "pending"
}

METHOD B: Get target groups:
{
  "id": "step-list-tg",
  "name": "List target groups",
  "description": "Find target groups",
  "action": "query",
  "resourceId": "target-groups",
  "mcpTool": "list-target-groups",
  "toolParameters": {},
  "dependsOn": [],
  "status": "pending"
}

Output: Returns loadBalancerArn and targetGroupArn fields

PATTERN 7: RDS INSTANCE DISCOVERY
Discover existing RDS instances

{
  "id": "step-list-databases",
  "name": "List RDS instances",
  "description": "Find existing databases",
  "action": "query",
  "resourceId": "databases",
  "mcpTool": "list-db-instances",
  "toolParameters": {},
  "dependsOn": [],
  "status": "pending"
}

Output: Returns dbInstanceIdentifier and endpoint fields
Lists all RDS instances in the region

═══════════════════════════════════════════════════════════════════
🎯 PARAMETER RESOLUTION PATTERNS
═══════════════════════════════════════════════════════════════════

SINGLE VALUE REFERENCE:
When a tool requires a single resource ID, reference the discovery step output:

{
  "toolParameters": {
    "vpcId": "{{step-discover-vpc.vpcId}}",
    "subnetId": "{{step-discover-subnet.subnetId}}",
    "imageId": "{{step-discover-ami.imageId}}"
  }
}

ARRAY VALUE REFERENCE:
When a tool accepts multiple IDs (subnets, security groups):

{
  "toolParameters": {
    "subnetIds": [
      "{{step-discover-subnet-1.subnetId}}",
      "{{step-discover-subnet-2.subnetId}}"
    ],
    "securityGroupIds": [
      "{{step-discover-sg.securityGroupId}}"
    ]
  }
}

ARN REFERENCE:
For resources that use ARNs (load balancers, target groups):

{
  "toolParameters": {
    "loadBalancerArn": "{{step-create-alb.loadBalancerArn}}",
    "targetGroupArn": "{{step-create-tg.targetGroupArn}}"
  }
}

NESTED OBJECT REFERENCE:
For complex action parameters:

{
  "toolParameters": {
    "defaultActions": [{
      "type": "forward",
      "targetGroupArn": "{{step-create-tg.targetGroupArn}}"
    }]
  }
}

═══════════════════════════════════════════════════════════════════
🏗️ COMMON RESOURCE CREATION PATTERNS
═══════════════════════════════════════════════════════════════════

PATTERN 1: EC2 INSTANCE
Requires: AMI, VPC, Subnet, Security Group

Discovery Phase (steps 1-4):
- Discover VPC
- Discover Subnet
- Discover AMI
- Discover Security Group

Creation Phase (step 5):
{
  "action": "create",
  "mcpTool": "create-ec2-instance",
  "toolParameters": {
    "imageId": "{{step-discover-ami.imageId}}",
    "instanceType": "t3.micro",
    "subnetId": "{{step-discover-subnet.subnetId}}",
    "securityGroupIds": ["{{step-discover-sg.securityGroupId}}"],
    "name": "web-server"
  },
  "dependsOn": ["step-discover-ami", "step-discover-subnet", "step-discover-sg"]
}

PATTERN 2: SECURITY GROUP WITH RULES
Create security group, then add rules

Step 1 - Create Security Group:
{
  "action": "create",
  "mcpTool": "create-security-group",
  "toolParameters": {
    "groupName": "web-sg",
    "description": "Allow web traffic",
    "vpcId": "{{step-discover-vpc.vpcId}}"
  },
  "dependsOn": ["step-discover-vpc"]
}

Step 2 - Add Ingress Rules:
{
  "action": "create",
  "mcpTool": "authorize-security-group-ingress",
  "toolParameters": {
    "groupId": "{{step-create-sg.securityGroupId}}",
    "ipPermissions": [{
      "ipProtocol": "tcp",
      "fromPort": 80,
      "toPort": 80,
      "ipRanges": [{"cidrIp": "0.0.0.0/0"}]
    }]
  },
  "dependsOn": ["step-create-sg"]
}

PATTERN 3: APPLICATION LOAD BALANCER
Requires: VPC, Subnets (2+ in different AZs), Security Group, Target Group

Discovery Phase:
- Discover VPC
- Discover Subnets

Creation Phase:
1. Create Security Group (with HTTP rules)
2. Create Target Group
3. Create Load Balancer
4. Create Listener

Load Balancer Creation:
{
  "action": "create",
  "mcpTool": "create-load-balancer",
  "toolParameters": {
    "name": "web-alb",
    "type": "application",
    "scheme": "internet-facing",
    "subnetIds": [
      "{{step-discover-subnet-1.subnetId}}",
      "{{step-discover-subnet-2.subnetId}}"
    ],
    "securityGroupIds": ["{{step-create-sg.securityGroupId}}"]
  },
  "dependsOn": ["step-discover-subnet-1", "step-discover-subnet-2", "step-create-sg"]
}

PATTERN 4: RDS DATABASE
Requires: VPC, Subnets (2+ in different AZs), DB Subnet Group, Security Group

Discovery Phase:
- Discover VPC
- Discover Subnets

Creation Phase:
1. Create DB Subnet Group
2. Create Security Group (with database port rules)
3. Create RDS Instance

DB Subnet Group Creation:
{
  "action": "create",
  "mcpTool": "create-db-subnet-group",
  "toolParameters": {
    "dbSubnetGroupName": "db-subnet-group",
    "dbSubnetGroupDescription": "Subnet group for RDS",
    "subnetIds": [
      "{{step-discover-subnet-1.subnetId}}",
      "{{step-discover-subnet-2.subnetId}}"
    ]
  },
  "dependsOn": ["step-discover-subnet-1", "step-discover-subnet-2"]
}

RDS Instance Creation:
{
  "action": "create",
  "mcpTool": "create-db-instance",
  "toolParameters": {
    "dbInstanceIdentifier": "mysql-db",
    "dbInstanceClass": "db.t3.micro",
    "engine": "mysql",
    "engineVersion": "8.0",
    "masterUsername": "admin",
    "masterUserPassword": "SecurePass123!",
    "allocatedStorage": 20,
    "dbSubnetGroupName": "{{step-create-db-subnet-group.dbSubnetGroupName}}",
    "vpcSecurityGroupIds": ["{{step-create-db-sg.securityGroupId}}"]
  },
  "dependsOn": ["step-create-db-subnet-group", "step-create-db-sg"]
}

═══════════════════════════════════════════════════════════════════
⚠️ CRITICAL REMINDERS
═══════════════════════════════════════════════════════════════════

1. ALL query steps MUST be placed FIRST in execution plan
2. Discovery steps have NO dependencies (dependsOn: [])
3. Only reference previous steps in the execution order
4. Use exact field names from tool output schemas
5. For multi-value parameters, always use arrays
6. Include ALL referenced steps in dependsOn array
7. Use only "create" and "query" actions

═══════════════════════════════════════════════════════════════════
