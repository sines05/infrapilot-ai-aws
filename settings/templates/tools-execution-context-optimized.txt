🔧 MCP TOOLS & EXECUTION CONTEXT

═══════════════════════════════════════════════════════════════════
📚 AVAILABLE MCP TOOLS
═══════════════════════════════════════════════════════════════════

{{MCP_TOOLS_SCHEMAS}}

═══════════════════════════════════════════════════════════════════
🔍 QUERY ACTION PATTERNS
═══════════════════════════════════════════════════════════════════

Use "query" action to discover existing AWS resources dynamically.
These steps MUST be placed FIRST in your execution plan.

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🎓 TOOL PATTERN REFERENCE FOR NEW RESOURCES
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

If you encounter a resource not explicitly documented below, follow these patterns:

TOOL NAMING PATTERNS:
├─ Discovery: get-default-{{resource}}, list-{{resources}}, get-latest-{{type}}
├─ Creation: create-{{resource}}
└─ Management: start-{{resource}}, stop-{{resource}}, delete-{{resource}}

PARAMETER STYLE:
├─ Always snake_case: vpc_id, bucket_name, function_name (NOT vpcId, bucketName)
├─ No filters in list tools: list-vpcs, list-subnets (NOT list-vpcs with filters)
└─ Arrays when multiple: subnet_ids, security_group_ids

OUTPUT FIELDS (from tool execution):
├─ IDs: {{resource}}_id → vpc_id, subnet_id, instance_id
├─ ARNs: {{resource}}_arn → role_arn, function_arn, topic_arn
└─ Names: {{resource}}_name → bucket_name, table_name

COMMON PATTERNS BY CATEGORY:

Storage (S3, EFS, EBS):
  Tools: create-s3-bucket, create-file-system, create-volume
  Params: bucket_name, file_system_name, volume_id, size
  No network dependencies

Compute (EC2, Lambda, ECS):
  Tools: create-ec2-instance, create-lambda-function, create-ecs-cluster
  Params: image_id/function_name, instance_type/runtime, vpc_id, subnet_id, security_group_id
  Requires: VPC, Subnet, Security Group

Database (RDS, DynamoDB):
  Tools: create-db-instance, create-table
  Params: db_instance_identifier/table_name, engine/attributes, vpc_id, subnet_ids
  Requires: VPC, Subnets (multiple AZs), Security Group, DB subnet group

Network (ALB, VPC, CloudFront):
  Tools: create-load-balancer, create-vpc, create-distribution
  Params: name, scheme, vpc_id, subnet_ids, security_group_ids
  Requires: VPC, Subnets (2+ AZs for ALB)

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
📋 DOCUMENTED RESOURCE PATTERNS
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Below are specific patterns for commonly used resources. For resources not listed,
apply the general patterns above.

PATTERN 1: VPC DISCOVERY
Discover existing VPCs or get default VPC

METHOD A: Get default VPC (recommended):
{
  "id": "step-discover-vpc",
  "name": "Get default VPC",
  "description": "Find default VPC for resource placement",
  "action": "query",
  "resourceId": "vpc",
  "mcpTool": "get-default-vpc",
  "toolParameters": {},
  "dependsOn": [],
  "status": "pending"
}

METHOD B: List all VPCs:
{
  "id": "step-discover-vpc",
  "name": "List VPCs",
  "description": "Find all VPCs in region",
  "action": "query",
  "resourceId": "vpc",
  "mcpTool": "list-vpcs",
  "toolParameters": {},
  "dependsOn": [],
  "status": "pending"
}

Output: Returns vpc_id field

PATTERN 2: SUBNET DISCOVERY
Discover subnets within a VPC

METHOD A: List subnets in VPC:
{
  "id": "step-discover-subnets",
  "name": "List subnets",
  "description": "Find all subnets in VPC",
  "action": "query",
  "resourceId": "subnets",
  "mcpTool": "list-subnets",
  "toolParameters": {
    "vpc_id": "{{step-discover-vpc.vpc_id}}"
  },
  "dependsOn": ["step-discover-vpc"],
  "status": "pending"
}

METHOD B: Select subnets for ALB (auto-selects 2+ subnets in different AZs):
{
  "id": "step-select-alb-subnets",
  "name": "Select subnets for ALB",
  "description": "Auto-select subnets for load balancer",
  "action": "query",
  "resourceId": "alb-subnets",
  "mcpTool": "list-subnets-for-alb",
  "toolParameters": {
    "vpc_id": "{{step-discover-vpc.vpc_id}}",
    "min_azs": 2,
    "require_multi_az": true
  },
  "dependsOn": ["step-discover-vpc"],
  "status": "pending"
}

Output: Returns subnetId field or array of subnet IDs
Note: For single subnet needs, use list-subnets and select first result
Note: For ALB deployments, always use list-subnets-for-alb to ensure multi-AZ compliance

PATTERN 3: SECURITY GROUP DISCOVERY
Discover security groups in a VPC

METHOD A: List all security groups:
{
  "id": "step-discover-sg",
  "name": "List security groups",
  "description": "Find available security groups",
  "action": "query",
  "resourceId": "security-group",
  "mcpTool": "list-security-groups",
  "toolParameters": {},
  "dependsOn": [],
  "status": "pending"
}

Output: Returns securityGroupId field

Common filters:
- "vpc-id": "vpc-xxxxx" → Find SGs in VPC
- "group-name": "web-sg" → Find by name
- "tag:Environment": "production" → Find by tag

PATTERN 4: AMI DISCOVERY
Discover latest AMI for instance launch

METHOD A: Get latest Ubuntu AMI:
{
  "id": "step-get-ubuntu-ami",
  "name": "Get latest Ubuntu AMI",
  "description": "Find latest Ubuntu image",
  "action": "query",
  "resourceId": "ubuntu-ami",
  "mcpTool": "get-latest-ubuntu-ami",
  "toolParameters": {
    "architecture": "x86_64"
  },
  "dependsOn": [],
  "status": "pending"
}

Output: Returns imageId field

PATTERN 5: INSTANCE DISCOVERY
Discover existing EC2 instances

{
  "id": "step-list-instances",
  "name": "List EC2 instances",
  "description": "Find running EC2 instances",
  "action": "query",
  "resourceId": "instances",
  "mcpTool": "list-ec2-instances",
  "toolParameters": {},
  "dependsOn": [],
  "status": "pending"
}

Output: Returns instanceId field

═══════════════════════════════════════════════════════════════════
🎯 PARAMETER RESOLUTION PATTERNS
═══════════════════════════════════════════════════════════════════

SINGLE VALUE REFERENCE:
When a tool requires a single resource ID, reference the discovery step output:

{
  "toolParameters": {
    "vpc_id": "{{step-discover-vpc.vpc_id}}",
    "subnet_id": "{{step-discover-subnet.subnetId}}",
    "image_id": "{{step-discover-ami.imageId}}"
  }
}

ARRAY VALUE REFERENCE:
When a tool accepts multiple IDs (subnets, security groups):

{
  "toolParameters": {
    "subnet_ids": [
      "{{step-discover-subnet-1.subnetId}}",
      "{{step-discover-subnet-2.subnetId}}"
    ],
    "security_group_ids": [
      "{{step-discover-sg.securityGroupId}}"
    ]
  }
}

═══════════════════════════════════════════════════════════════════
🏗️ COMMON RESOURCE CREATION PATTERNS
═══════════════════════════════════════════════════════════════════

PATTERN 1: EC2 INSTANCE
Requires: AMI, VPC, Subnet, Security Group, Key Pair

Discovery Phase (steps 1-4):
- Discover VPC
- Discover Subnet
- Discover AMI
- Discover Security Group

Creation Phase (step 5):
{
  "action": "create",
  "mcpTool": "create-ec2-instance",
  "toolParameters": {
    "image_id": "{{step-discover-ami.imageId}}",
    "instance_type": "t3.micro", // Prioritize use t3.micro
    "key_name": "your-key-pair-name",
    "subnet_id": "{{step-discover-subnet.subnetId}}",
    "security_group_ids": ["{{step-discover-sg.securityGroupId}}"],
    "tags": [{"Key": "Name", "Value": "web-server"}]
  },
  "dependsOn": ["step-discover-ami", "step-discover-subnet", "step-discover-sg"]
}

PATTERN 2: SECURITY GROUP WITH RULES
Create security group, then add rules

Step 1 - Create Security Group:
{
  "action": "create",
  "mcpTool": "create-security-group",
  "toolParameters": {
    "group_name": "web-sg",
    "description": "Allow web traffic",
    "vpc_id": "{{step-discover-vpc.vpc_id}}"
  },
  "dependsOn": ["step-discover-vpc"]
}

Step 2 - Add Ingress Rules:
{
  "action": "create",
  "mcpTool": "add-security-group-ingress-rule",
  "toolParameters": {
    "group_id": "{{step-create-sg.groupId}}",
    "protocol": "tcp",
    "from_port": 80,
    "to_port": 80,
    "cidr_block": "0.0.0.0/0"
  },
  "dependsOn": ["step-create-sg"]
}

PATTERN 3: APPLICATION LOAD BALANCER
Requires: VPC, Subnets (2+ in different AZs), Security Group, Target Group

Load Balancer Creation:
{
  "action": "create",
  "mcpTool": "create-load-balancer",
  "toolParameters": {
    "name": "web-alb",
    "type": "application",
    "scheme": "internet-facing",
    "subnet_ids": [
      "{{step-discover-subnet-1.subnetId}}",
      "{{step-discover-subnet-2.subnetId}}"
    ],
    "security_group_ids": ["{{step-create-sg.securityGroupId}}"]
  },
  "dependsOn": ["step-discover-subnet-1", "step-discover-subnet-2", "step-create-sg"]
}

PATTERN 4: RDS DATABASE
Requires: VPC, Subnets (2+ in different AZs), DB Subnet Group, Security Group

DB Subnet Group Creation:
{
  "action": "create",
  "mcpTool": "create-db-subnet-group",
  "toolParameters": {
    "db_subnet_group_name": "db-subnet-group",
    "db_subnet_group_description": "Subnet group for RDS",
    "subnet_ids": [
      "{{step-discover-subnet-1.subnetId}}",
      "{{step-discover-subnet-2.subnetId}}"
    ]
  },
  "dependsOn": ["step-discover-subnet-1", "step-discover-subnet-2"]
}

RDS Instance Creation:
{
  "action": "create",
  "mcpTool": "create-db-instance",
  "toolParameters": {
    "db_instance_identifier": "mysql-db",
    "db_instance_class": "db.t3.micro",
    "engine": "mysql",
    "engine_version": "8.0",
    "master_username": "admin",
    "master_user_password": "SecurePass123!",
    "allocated_storage": 20,
    "db_subnet_group_name": "{{step-create-db-subnet-group.dbSubnetGroupName}}",
    "vpc_security_group_ids": ["{{step-create-db-sg.securityGroupId}}"]
  },
  "dependsOn": ["step-create-db-subnet-group", "step-create-db-sg"]
}

═══════════════════════════════════════════════════════════════════
⚠️ CRITICAL REMINDERS
═══════════════════════════════════════════════════════════════════

1. ALL query steps MUST be placed FIRST in execution plan
2. Discovery steps have NO dependencies (dependsOn: [])
3. Only reference previous steps in the execution order
4. Use exact field names from tool output schemas
5. For multi-value parameters, always use arrays
6. Include ALL referenced steps in dependsOn array
7. Use only "create" and "query" actions

═══════════════════════════════════════════════════════════════════
